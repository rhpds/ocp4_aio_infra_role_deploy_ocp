---
# vim: set ft=ansible:
- name: Make sure that Bastion machine is running
  ansible.builtin.wait_for_connection:
    timeout: 240

- name: Get exact OpenShift version in use
  ansible.builtin.command: oc version --client=false
  register: ocp_client_output

- name: Set ocp_client_version fact
  ansible.builtin.set_fact:
    ocp_client_version: "{{ ocp_client_output.stdout.split('\n')[0].split(':')[1] | trim }}"

- name: Set ocp_client_major_fact
  ansible.builtin.set_fact:
    ocp_client_major: "{{ ocp_client_version.split('.')[:2] | join('.') }}"

- name: Check if OpenShift Installer binary exists
  ansible.builtin.stat:
    path: /root/openshift-baremetal-install
  register: installer_exists

- name: Extract OpenShift Baremetal Installer for IPI
  when: not installer_exists.stat.exists
  ansible.builtin.command: >
    oc adm release extract --registry-config /root/pull-secret.json
    --command=openshift-baremetal-install --to /root {{ ocp_client_version }}

- name: Get OpenShift installer commit ID for IPI
  ansible.builtin.command: /root/openshift-baremetal-install version
  register: installer_version

- name: Set installer_commit fact
  ansible.builtin.set_fact:
    installer_commit: "{{ installer_version.stdout_lines[1].split('commit')[1] | trim }}"

- name: Check if RHCOS file descriptor exists
  ansible.builtin.stat:
    path: /root/openshift-baremetal-install
  register: installer_exists

- name: Get the RHCOS file descriptor for IPI deployments before 4.10
  when: ocp_client_major is version('4.10', operator='lt', strict=true)
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/openshift/installer/{{ installer_commit }}/data/data/rhcos.json"
    dest: /tmp/rhcos.json
    mode: "0644"

- name: Get the RHCOS file descriptor for IPI deployments starting with 4.10
  when: ocp_client_major is version('4.10', operator='ge', strict=true)
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/openshift/installer/{{ installer_commit }}/data/data/coreos/rhcos.json"
    dest: /tmp/rhcos.json
    mode: "0644"

- name: Slurp the RHCOS json data
  ansible.builtin.slurp:
    path: /tmp/rhcos.json
  register: rhcos_slurp

- name: Decode the RHCOS json data
  ansible.builtin.set_fact:
    rhcos_json: "{{ rhcos_slurp.content | b64decode }}"

- name: Set Facts for OCP before 4.10
  when: ocp_client_major is version('4.10', operator='lt', strict=true)
  block:
  - name: Get RHCOS OpenStack image URL before 4.10
    ansible.builtin.set_fact:
      rhcos_openstack_url: "{{ rhcos_json.baseURI }}{{ rhcos_json.images.openstack.path }}"

  - name: Get RHCOS QEMU image URL before 4.10
    when: ocp_client_major is version('4.10', operator='lt', strict=true)
    ansible.builtin.set_fact:
      rhcos_qemu_url: "{{ rhcos_json.baseURI }}{{ rhcos_json.images.qemu.path }}"

  - name: Get RHCOS OpenStack sha265 checksum before 4.10
    ansible.builtin.set_fact:
      rhcos_openstack_sha256: "{{ rhcos_json.images.openstack.sha256 }}"

  - name: Get RHCOS QEMU sha265 checksum
    ansible.builtin.set_fact:
      rhcos_qemu_sha256: "{{ rhcos_json.images.qemu[\"uncompressed-sha256\"] }}"

- name: Set Facts for OCP starting with 4.10
  when: ocp_client_major is version('4.10', operator='ge', strict=true)
  block:
  - name: Get RHCOS OpenStack image URL
    ansible.builtin.set_fact:
      rhcos_openstack_url: "{{ rhcos_json.architectures.x86_64.artifacts.openstack.formats[\"qcow2.gz\"].disk.location }}"  

  - name: Get RHCOS QEMU image URL
    ansible.builtin.set_fact:
      rhcos_qemu_url: "{{ rhcos_json.architectures.x86_64.artifacts.qemu.formats[\"qcow2.gz\"].disk.location }}"

  - name: Get RHCOS OpenStack sha265 checksum
    ansible.builtin.set_fact:
      rhcos_openstack_sha256: "{{ rhcos_json.architectures.x86_64.artifacts.openstack.formats[\"qcow2.gz\"].disk[\"uncompressed-sha256\"] }}"

  - name: Get RHCOS QEMU sha265 checksum
    ansible.builtin.set_fact:
      rhcos_qemu_sha256: "{{ rhcos_json.architectures.x86_64.artifacts.qemu.formats[\"qcow2.gz\"].disk[\"uncompressed-sha256\"] }}"

- name: Check if RHCOS OpenStack image exists
  ansible.builtin.stat:
    path: /var/www/html/rhcos-openstack.x86_64.qcow2.gz
  register: openstack_exists

- name: Download the RHCOS OpenStack image
  when: not openstack_exists.stat.exists
  ansible.builtin.get_url:
    url: "{{ rhcos_openstack_url }}"
    dest: /var/www/html/rhcos-openstack.x86_64.qcow2.gz
    validate_certs: false
    mode: "0644"

- name: Check if RHCOS QEMU image exists
  ansible.builtin.stat:
    path: /var/www/html/rhcos-qemu.x86_64.qcow2.gz
  register: qemu_exists

- name: Download the RHCOS QEMU image
  when: not qemu_exists.stat.exists
  ansible.builtin.get_url:
    url: "{{ rhcos_qemu_url }}"
    dest: /var/www/html/rhcos-qemu.x86_64.qcow2.gz
    validate_certs: false
    mode: "0644"

- name: Block for install ocp when building
  when: build_lab | bool
  block:
  - name: Ensure ocp-install directory is removed
    ansible.builtin.file:
      path: /root/ocp-install
      state: absent

  - name: Create ocp-install directory
    ansible.builtin.file:
      path: /root/ocp-install/
      state: directory
      mode: "0775"

  - name: Copy lab install-config to ocp-install directory
    ansible.builtin.copy:
      remote_src: true
      src: /root/lab/install-config.yaml
      dest: /root/ocp-install/install-config.yaml
      mode: "0664"

  - name: Update OpenStack image location in install-config
    ansible.builtin.replace:
      path: /root/ocp-install/install-config.yaml
      regexp: 'RHCOS_OPENSTACK_IMAGE'
      replace: "http://192.168.123.100:81/rhcos-openstack.x86_64.qcow2.gz?sha256={{ rhcos_openstack_sha256 }}"
    when: ocp4_aio_deploy_type == "ipi"

  - name: Update OpenStack image location in install-config
    ansible.builtin.replace:
      path: /root/ocp-install/install-config.yaml
      regexp: 'RHCOS_QEMU_IMAGE'
      replace: "http://192.168.123.100:81/rhcos-qemu.x86_64.qcow2.gz?sha256={{ rhcos_qemu_sha256 }}"
    when: ocp4_aio_deploy_type == "ipi"

  - name: Make a backup of the install-config from ocp-install directory
    ansible.builtin.copy:
      remote_src: true
      src: /root/ocp-install/install-config.yaml
      dest: /root/install-config.yaml.bak
      mode: "0664"

  - name: Create OpenShift manifests for IPI
    when: ocp4_aio_deploy_type == "ipi"
    ansible.builtin.command: >
      /root/openshift-baremetal-install
      --dir=/root/ocp-install/ create manifests

  - name: Copy over MachineConfigs for chrony and networking
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: /root/ocp-install/openshift
      mode: "0664"
    loop:
    - "99_masters-chrony-configuration.yaml"
    - "99_workers-chrony-configuration.yaml"

  - name: Pull required images for OpenShift logging
    containers.podman.podman_image:
      name: "quay.io/roxenham/frontail"

  - name: Run frontail for OpenShift installation log
    containers.podman.podman_container:
      name: frontail
      state: started
      image: quay.io/roxenham/frontail
      volume: "/root/ocp-install:/log/"
      net: host
      privileged: true
      command: "/log/.openshift_install.log -n 6000"

  - name: Print OpenShift Installation log location
    vars:
      msg: |
        You can watch the OpenShift installation logs by opening the following URL:

        http://{{ aio_host_ip_address }}:9001
    ansible.builtin.debug:
      msg: "{{ msg.split('\n') }}"

  # Ignore errors here to avoid timeout issues and run wait-for install-complete
  - name: Run OpenShift Installation for IPI with 1hr timeout
    ansible.builtin.command: >
      /root/openshift-baremetal-install
      --dir=/root/ocp-install/ --log-level=debug
      create cluster
    when: ocp4_aio_deploy_type == "ipi"
    async: 6000
    poll: 0
    register: ipi_install

  - name: Check installation
    ansible.builtin.async_status:
      jid: "{{ ipi_install.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 100
    delay: 60

  - name: Create .kube directory
    ansible.builtin.file:
      path: /root/.kube/
      state: directory
      mode: "0775"

  - name: Copy kubeconfig from ocp-install directory
    ansible.builtin.copy:
      remote_src: true
      src: /root/ocp-install/auth/kubeconfig
      dest: /root/.kube/config
      mode: "0664"

- name: Get cluster password as variable
  ansible.builtin.slurp:
    src: /root/ocp-install/auth/kubeadmin-password
  register: kubeadmin_password

- name: Create object to store kube passwd
  ansible.builtin.add_host:
    name: "kube_holder"
    kubeadmin_password: "{{ kubeadmin_password['content'] | b64decode }}"

- name: Pull kubeadmin-password to local generated
  ansible.builtin.fetch:
    src: /root/ocp-install/auth/kubeadmin-password
    dest: ../../generated/kubeadmin-password.txt
    flat: true

- name: Stop frontail
  containers.podman.podman_container:
    name: frontail
    state: stopped
